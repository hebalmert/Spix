// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Spix.AppInfra;

#nullable disable

namespace Spix.AppBack.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251009193720_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Spix.Domain.EntitesSoftSec.Usuario", b =>
                {
                    b.Property<int>("UsuarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nro_Document")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDocument")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("UsuarioId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("FullName", "Nro_Document", "CorporationId")
                        .IsUnique()
                        .HasFilter("[FullName] IS NOT NULL");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Spix.Domain.EntitesSoftSec.UsuarioRole", b =>
                {
                    b.Property<int>("UsuarioRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsuarioRoleId"));

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioRoleId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("UsuarioId", "UserType")
                        .IsUnique();

                    b.ToTable("UsuarioRoles");
                });

            modelBuilder.Entity("Spix.Domain.Entities.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("Name", "StateId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Spix.Domain.Entities.Corporation", b =>
                {
                    b.Property<int>("CorporationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CorporationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("date");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<string>("NroDocument")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("SoftPlanId")
                        .HasColumnType("int");

                    b.Property<string>("TypeDocument")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CorporationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("SoftPlanId");

                    b.HasIndex("Name", "NroDocument")
                        .IsUnique();

                    b.ToTable("Corporations");
                });

            modelBuilder.Entity("Spix.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CodPhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("CountryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Spix.Domain.Entities.Manager", b =>
                {
                    b.Property<int>("ManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManagerId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NroDocument")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("TypeDocument")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("ManagerId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.HasIndex("FullName", "NroDocument")
                        .IsUnique()
                        .HasFilter("[FullName] IS NOT NULL");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Spix.Domain.Entities.SoftPlan", b =>
                {
                    b.Property<int>("SoftPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoftPlanId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Meses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StudyCount")
                        .HasColumnType("int");

                    b.HasKey("SoftPlanId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SoftPlans");
                });

            modelBuilder.Entity("Spix.Domain.Entities.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StateId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .UseCollation("Latin1_General_CI_AS");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.HasIndex("Name", "CountryId")
                        .IsUnique();

                    b.ToTable("States");
                });

            modelBuilder.Entity("Spix.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(101)
                        .HasColumnType("nvarchar(101)");

                    b.Property<string>("JobPosition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CorporationId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Spix.Domain.Entities.UserRoleDetails", b =>
                {
                    b.Property<int>("UserRoleDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleDetailsId"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserRoleDetailsId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleDetailsId");

                    b.HasIndex("UserType", "UserId")
                        .IsUnique()
                        .HasFilter("[UserType] IS NOT NULL AND [UserId] IS NOT NULL");

                    b.ToTable("UserRoleDetails");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesData.ChainType", b =>
                {
                    b.Property<int>("ChainTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChainTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ChainName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ChainTypeId");

                    b.HasIndex("ChainName")
                        .IsUnique();

                    b.ToTable("ChainTypes");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesData.Channel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChannelId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ChannelId");

                    b.HasIndex("ChannelName")
                        .IsUnique();

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesData.Frecuency", b =>
                {
                    b.Property<int>("FrecuencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrecuencyId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("FrecuencyName")
                        .HasColumnType("int");

                    b.Property<int>("FrecuencyTypeId")
                        .HasColumnType("int");

                    b.HasKey("FrecuencyId");

                    b.HasIndex("FrecuencyTypeId", "FrecuencyName")
                        .IsUnique();

                    b.ToTable("Frecuencies");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesData.FrecuencyType", b =>
                {
                    b.Property<int>("FrecuencyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrecuencyTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("FrecuencyTypeId");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("FrecuencyTypes");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesData.HotSpotType", b =>
                {
                    b.Property<int>("HotSpotTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotSpotTypeId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("HotSpotTypeId");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("HotSpotTypes");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesData.Operation", b =>
                {
                    b.Property<int>("OperationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OperationId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OperationId");

                    b.HasIndex("OperationName")
                        .IsUnique();

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesData.Security", b =>
                {
                    b.Property<int>("SecurityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SecurityId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SecurityId");

                    b.HasIndex("SecurityName")
                        .IsUnique();

                    b.ToTable("Securities");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.DocumentType", b =>
                {
                    b.Property<Guid>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("DocumentTypeId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("DocumentName", "CorporationId")
                        .IsUnique();

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Mark", b =>
                {
                    b.Property<Guid>("MarkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("MarkName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MarkId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("MarkName", "CorporationId")
                        .IsUnique();

                    b.ToTable("Marks");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.MarkModel", b =>
                {
                    b.Property<Guid>("MarkModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<Guid>("MarkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MarkModelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MarkModelId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("MarkId");

                    b.HasIndex("MarkModelName", "CorporationId", "MarkId")
                        .IsUnique();

                    b.ToTable("MarkModels");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Plan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SpeedDown")
                        .HasColumnType("int");

                    b.Property<int>("SpeedDownType")
                        .HasColumnType("int");

                    b.Property<int>("SpeedUp")
                        .HasColumnType("int");

                    b.Property<int>("SpeedUpType")
                        .HasColumnType("int");

                    b.Property<int>("TasaReuso")
                        .HasColumnType("int");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanId");

                    b.HasIndex("PlanCategoryId");

                    b.HasIndex("PlanId");

                    b.HasIndex("TaxId");

                    b.HasIndex("CorporationId", "PlanName");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.PlanCategory", b =>
                {
                    b.Property<Guid>("PlanCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("PlanCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PlanCategoryId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("PlanCategoryName", "CorporationId")
                        .IsUnique();

                    b.ToTable("PlanCategories");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WithSerials")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("TaxId");

                    b.HasIndex("CorporationId", "ProductName")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("CorporationId", "Name")
                        .IsUnique();

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Register", b =>
                {
                    b.Property<Guid>("RegisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Adelantado")
                        .HasColumnType("int");

                    b.Property<int>("Cargue")
                        .HasColumnType("int");

                    b.Property<int>("Contratos")
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("Egresos")
                        .HasColumnType("int");

                    b.Property<int>("Exonerado")
                        .HasColumnType("int");

                    b.Property<int>("Factura")
                        .HasColumnType("int");

                    b.Property<int>("NotaCobro")
                        .HasColumnType("int");

                    b.Property<int>("PagoContratista")
                        .HasColumnType("int");

                    b.Property<int>("RegPurchase")
                        .HasColumnType("int");

                    b.Property<int>("RegSells")
                        .HasColumnType("int");

                    b.Property<int>("RegTransfer")
                        .HasColumnType("int");

                    b.Property<int>("Solicitudes")
                        .HasColumnType("int");

                    b.HasKey("RegisterId");

                    b.HasIndex("CorporationId", "Adelantado")
                        .IsUnique();

                    b.HasIndex("CorporationId", "Cargue")
                        .IsUnique();

                    b.HasIndex("CorporationId", "Contratos")
                        .IsUnique();

                    b.HasIndex("CorporationId", "Egresos")
                        .IsUnique();

                    b.HasIndex("CorporationId", "Exonerado")
                        .IsUnique();

                    b.HasIndex("CorporationId", "Factura")
                        .IsUnique();

                    b.HasIndex("CorporationId", "NotaCobro")
                        .IsUnique();

                    b.HasIndex("CorporationId", "PagoContratista")
                        .IsUnique();

                    b.HasIndex("CorporationId", "Solicitudes")
                        .IsUnique();

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.ServiceCategory", b =>
                {
                    b.Property<Guid>("ServiceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ServiceCategoryId");

                    b.HasIndex("CorporationId", "Name")
                        .IsUnique();

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.ServiceClient", b =>
                {
                    b.Property<Guid>("ServiceClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Costo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ServiceClientId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("TaxId");

                    b.HasIndex("CorporationId", "ServiceName")
                        .IsUnique();

                    b.ToTable("ServiceClients");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Tax", b =>
                {
                    b.Property<Guid>("TaxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("TaxName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TaxId");

                    b.HasIndex("CorporationId", "Rate")
                        .IsUnique();

                    b.HasIndex("CorporationId", "TaxName")
                        .IsUnique();

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Zone", b =>
                {
                    b.Property<Guid>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ZoneId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("CorporationId", "StateId", "CityId", "ZoneName")
                        .IsUnique();

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Cargue", b =>
                {
                    b.Property<Guid>("CargueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CantToUp")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ControlCargue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCargue")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseDetailId")
                        .HasMaxLength(20)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasMaxLength(20)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CargueId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseDetailId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("Cargue");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.CargueDetail", b =>
                {
                    b.Property<Guid>("CargueDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CargueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCargue")
                        .HasColumnType("datetime2");

                    b.Property<string>("MacWlan")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CargueDetailId");

                    b.HasIndex("CargueId");

                    b.HasIndex("CorporationId");

                    b.ToTable("CargueDetail");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.ProductStock", b =>
                {
                    b.Property<Guid>("ProductStockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Stock")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductStockId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductStorageId");

                    b.ToTable("ProductStock");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.ProductStorage", b =>
                {
                    b.Property<Guid>("ProductStorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StorageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductStorageId");

                    b.HasIndex("CityId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("StateId");

                    b.ToTable("ProductStorage");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Purchase", b =>
                {
                    b.Property<Guid>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FacuraDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NroFactura")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NroPurchase")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PurchaseId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("ProductStorageId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.PurchaseDetail", b =>
                {
                    b.Property<Guid>("PurchaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("NameProduct")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RateTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseDetailId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseDetail");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CodeCountry")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("CodeNumber")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("DocumentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SupplierId");

                    b.HasIndex("CityId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("StateId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Transfer", b =>
                {
                    b.Property<Guid>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTransfer")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromProductStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FromStorageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NroTransfer")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("ToProductStorageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToStorageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransferId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("UserId");

                    b.ToTable("Transfer");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.TransferDetails", b =>
                {
                    b.Property<Guid>("TransferDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CorporationId")
                        .HasColumnType("int");

                    b.Property<string>("NameProduct")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TransferId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransferDetailsId");

                    b.HasIndex("CorporationId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Spix.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Spix.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Spix.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Spix.Domain.EntitesSoftSec.Usuario", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany("Usuarios")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.EntitesSoftSec.UsuarioRole", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitesSoftSec.Usuario", "Usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Spix.Domain.Entities.City", b =>
                {
                    b.HasOne("Spix.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Spix.Domain.Entities.Corporation", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Country", "Country")
                        .WithMany("Corporations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.SoftPlan", "SoftPlan")
                        .WithMany("Corporations")
                        .HasForeignKey("SoftPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("SoftPlan");
                });

            modelBuilder.Entity("Spix.Domain.Entities.Manager", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany("Managers")
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.Entities.State", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Spix.Domain.Entities.User", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId");

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.Entities.UserRoleDetails", b =>
                {
                    b.HasOne("Spix.Domain.Entities.User", "User")
                        .WithMany("UserRoleDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesData.Frecuency", b =>
                {
                    b.HasOne("Spix.Domain.EntitiesData.FrecuencyType", "FrecuencyType")
                        .WithMany("Frecuencies")
                        .HasForeignKey("FrecuencyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FrecuencyType");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.DocumentType", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Mark", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.MarkModel", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.Mark", "Mark")
                        .WithMany("MarkModels")
                        .HasForeignKey("MarkId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Mark");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Plan", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.PlanCategory", "PlanCategory")
                        .WithMany("Plans")
                        .HasForeignKey("PlanCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.Tax", "Tax")
                        .WithMany("Plans")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("PlanCategory");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.PlanCategory", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Product", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.Tax", "Tax")
                        .WithMany("Products")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("ProductCategory");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.ProductCategory", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Register", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.ServiceCategory", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.ServiceClient", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceClients")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.Tax", "Tax")
                        .WithMany("ServiceClients")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("ServiceCategory");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Tax", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Zone", b =>
                {
                    b.HasOne("Spix.Domain.Entities.City", "city")
                        .WithMany("Zones")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.State", "state")
                        .WithMany("Zones")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("city");

                    b.Navigation("state");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Cargue", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.Product", "Product")
                        .WithMany("Cargue")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesInven.PurchaseDetail", "PurchaseDetail")
                        .WithMany("Cargue")
                        .HasForeignKey("PurchaseDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesInven.Purchase", "Purchase")
                        .WithMany("Cargue")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Product");

                    b.Navigation("Purchase");

                    b.Navigation("PurchaseDetail");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.CargueDetail", b =>
                {
                    b.HasOne("Spix.Domain.EntitiesInven.Cargue", "Cargue")
                        .WithMany("CargueDetails")
                        .HasForeignKey("CargueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargue");

                    b.Navigation("Corporation");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.ProductStock", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.Product", "Product")
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesInven.ProductStorage", "ProductStorage")
                        .WithMany("ProductStocks")
                        .HasForeignKey("ProductStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Product");

                    b.Navigation("ProductStorage");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.ProductStorage", b =>
                {
                    b.HasOne("Spix.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Corporation");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Purchase", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesInven.ProductStorage", "ProductStorage")
                        .WithMany("Purchases")
                        .HasForeignKey("ProductStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesInven.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("ProductStorage");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.PurchaseDetail", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.Product", "Product")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesInven.Purchase", "Purchase")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Supplier", b =>
                {
                    b.HasOne("Spix.Domain.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Corporation");

                    b.Navigation("DocumentType");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Transfer", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Corporation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.TransferDetails", b =>
                {
                    b.HasOne("Spix.Domain.Entities.Corporation", "Corporation")
                        .WithMany()
                        .HasForeignKey("CorporationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.ProductCategory", "ProductCategory")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesGen.Product", "Product")
                        .WithMany("TransferDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Spix.Domain.EntitiesInven.Transfer", "Transfer")
                        .WithMany("TransferDetails")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Corporation");

                    b.Navigation("Product");

                    b.Navigation("ProductCategory");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("Spix.Domain.EntitesSoftSec.Usuario", b =>
                {
                    b.Navigation("UsuarioRoles");
                });

            modelBuilder.Entity("Spix.Domain.Entities.City", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Spix.Domain.Entities.Corporation", b =>
                {
                    b.Navigation("Managers");

                    b.Navigation("UsuarioRoles");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Spix.Domain.Entities.Country", b =>
                {
                    b.Navigation("Corporations");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Spix.Domain.Entities.SoftPlan", b =>
                {
                    b.Navigation("Corporations");
                });

            modelBuilder.Entity("Spix.Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("Spix.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoleDetails");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesData.FrecuencyType", b =>
                {
                    b.Navigation("Frecuencies");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Mark", b =>
                {
                    b.Navigation("MarkModels");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.PlanCategory", b =>
                {
                    b.Navigation("Plans");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Product", b =>
                {
                    b.Navigation("Cargue");

                    b.Navigation("ProductStocks");

                    b.Navigation("PurchaseDetails");

                    b.Navigation("TransferDetails");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.ServiceCategory", b =>
                {
                    b.Navigation("ServiceClients");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesGen.Tax", b =>
                {
                    b.Navigation("Plans");

                    b.Navigation("Products");

                    b.Navigation("ServiceClients");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Cargue", b =>
                {
                    b.Navigation("CargueDetails");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.ProductStorage", b =>
                {
                    b.Navigation("ProductStocks");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Purchase", b =>
                {
                    b.Navigation("Cargue");

                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.PurchaseDetail", b =>
                {
                    b.Navigation("Cargue");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Spix.Domain.EntitiesInven.Transfer", b =>
                {
                    b.Navigation("TransferDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
